package components

import (
	"strconv"
	"time"
)

// User represents a user data structure for templates
type User struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// UserProfile displays a user's profile information
templ UserProfile(user User) {
	<div class="card max-w-2xl mx-auto">
		<div class="flex items-center space-x-6 mb-6">
			<!-- Avatar -->
			<div class="w-20 h-20 bg-blue-600 rounded-full flex items-center justify-center">
				<span class="text-2xl font-bold text-white">
					{ string(user.FirstName[0]) }{ string(user.LastName[0]) }
				</span>
			</div>
			
			<!-- User Info -->
			<div class="flex-1">
				<h1 class="text-2xl font-bold text-gray-900">
					{ user.FirstName } { user.LastName }
				</h1>
				<p class="text-gray-600">{ user.Email }</p>
				<div class="mt-2">
					@UserStatusBadge(user.Status)
				</div>
			</div>
		</div>
		
		<!-- Profile Details -->
		<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
			<div>
				<h3 class="text-sm font-medium text-gray-700 mb-2">Account Information</h3>
				<dl class="space-y-3">
					<div>
						<dt class="text-sm text-gray-500">User ID</dt>
						<dd class="text-sm font-medium text-gray-900">{ user.ID }</dd>
					</div>
					<div>
						<dt class="text-sm text-gray-500">Email Address</dt>
						<dd class="text-sm font-medium text-gray-900">{ user.Email }</dd>
					</div>
					<div>
						<dt class="text-sm text-gray-500">Account Status</dt>
						<dd class="text-sm font-medium text-gray-900">{ user.Status }</dd>
					</div>
				</dl>
			</div>
			
			<div>
				<h3 class="text-sm font-medium text-gray-700 mb-2">Account Activity</h3>
				<dl class="space-y-3">
					<div>
						<dt class="text-sm text-gray-500">Member Since</dt>
						<dd class="text-sm font-medium text-gray-900">{ user.CreatedAt.Format("January 2, 2006") }</dd>
					</div>
					<div>
						<dt class="text-sm text-gray-500">Last Updated</dt>
						<dd class="text-sm font-medium text-gray-900">{ user.UpdatedAt.Format("January 2, 2006") }</dd>
					</div>
				</dl>
			</div>
		</div>
		
		<!-- Action Buttons -->
		<div class="mt-6 flex flex-col sm:flex-row gap-3">
			<a href="/profile/edit" class="btn-primary">
				Edit Profile
			</a>
			<a href="/profile/settings" class="btn-secondary">
				Account Settings
			</a>
		</div>
	</div>
}

// UserDashboard displays the main dashboard for authenticated users
templ UserDashboard(user User, stats DashboardStats) {
	<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
		<!-- Welcome Header -->
		<div class="mb-8">
			<h1 class="text-3xl font-bold text-gray-900">
				Welcome back, { user.FirstName }!
			</h1>
			<p class="text-gray-600 mt-2">
				Here's what's happening with your account today.
			</p>
		</div>
		
		<!-- Stats Cards -->
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
			@StatsCard("Account Status", user.Status, "user", getStatusColor(user.Status))
			@StatsCard("Member Since", user.CreatedAt.Format("Jan 2006"), "calendar", "blue")
			@StatsCard("Profile Views", stats.ProfileViews, "eye", "green")
			@StatsCard("Last Login", stats.LastLogin.Format("Jan 2"), "clock", "purple")
		</div>
		
		<!-- Quick Actions -->
		<div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
			<!-- Profile Summary -->
			<div class="card">
				<h2 class="text-lg font-semibold text-gray-900 mb-4">Profile Summary</h2>
				<div class="flex items-center space-x-4 mb-4">
					<div class="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center">
						<span class="text-lg font-bold text-white">
							{ string(user.FirstName[0]) }{ string(user.LastName[0]) }
						</span>
					</div>
					<div>
						<p class="font-medium text-gray-900">{ user.FirstName } { user.LastName }</p>
						<p class="text-sm text-gray-600">{ user.Email }</p>
					</div>
				</div>
				<div class="flex space-x-3">
					<a href="/profile" class="btn-primary text-sm">
						View Profile
					</a>
					<a href="/profile/edit" class="btn-secondary text-sm">
						Edit Profile
					</a>
				</div>
			</div>
			
			<!-- Recent Activity -->
			<div class="card">
				<h2 class="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h2>
				<div class="space-y-3">
					for _, activity := range stats.RecentActivities {
						@ActivityItem(activity)
					}
				</div>
				<div class="mt-4">
					<a href="/activity" class="text-sm text-blue-600 hover:text-blue-500">
						View all activity â†’
					</a>
				</div>
			</div>
		</div>
		
		<!-- Quick Links -->
		<div class="card">
			<h2 class="text-lg font-semibold text-gray-900 mb-4">Quick Links</h2>
			<div class="grid grid-cols-2 md:grid-cols-4 gap-4">
				@QuickLinkCard("Profile Settings", "/profile/settings", "cog")
				@QuickLinkCard("Security", "/profile/security", "shield")
				@QuickLinkCard("Notifications", "/profile/notifications", "bell")
				@QuickLinkCard("Help & Support", "/support", "question")
			</div>
		</div>
	</div>
}

// UserEditForm displays the form for editing user profile
templ UserEditForm(user User, errors map[string]string) {
	<div class="card max-w-2xl mx-auto">
		<div class="mb-6">
			<h2 class="text-2xl font-bold text-gray-900">Edit Profile</h2>
			<p class="text-gray-600 mt-2">Update your personal information and preferences.</p>
		</div>
		
		<form method="POST" action="/profile/edit" class="space-y-6">
			<!-- Personal Information -->
			<div>
				<h3 class="text-lg font-medium text-gray-900 mb-4">Personal Information</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
					<!-- First Name -->
					<div>
						<label for="first_name" class="form-label">First Name</label>
						<input 
							type="text" 
							id="first_name" 
							name="first_name" 
							value={ user.FirstName }
							class={ "form-input", templ.KV("border-red-300 focus:ring-red-500", errors["first_name"] != "") }
							placeholder="Enter your first name"
							required
						/>
						if errors["first_name"] != "" {
							@ErrorMessage(errors["first_name"])
						}
					</div>
					
					<!-- Last Name -->
					<div>
						<label for="last_name" class="form-label">Last Name</label>
						<input 
							type="text" 
							id="last_name" 
							name="last_name" 
							value={ user.LastName }
							class={ "form-input", templ.KV("border-red-300 focus:ring-red-500", errors["last_name"] != "") }
							placeholder="Enter your last name"
							required
						/>
						if errors["last_name"] != "" {
							@ErrorMessage(errors["last_name"])
						}
					</div>
				</div>
			</div>
			
			<!-- Contact Information -->
			<div>
				<h3 class="text-lg font-medium text-gray-900 mb-4">Contact Information</h3>
				<div>
					<label for="email" class="form-label">Email Address</label>
					<input 
						type="email" 
						id="email" 
						name="email" 
						value={ user.Email }
						class={ "form-input", templ.KV("border-red-300 focus:ring-red-500", errors["email"] != "") }
						placeholder="Enter your email"
						required
					/>
					<p class="mt-1 text-sm text-gray-500">
						We'll send important account updates to this email address.
					</p>
					if errors["email"] != "" {
						@ErrorMessage(errors["email"])
					}
				</div>
			</div>
			
			<!-- Form Actions -->
			<div class="flex flex-col sm:flex-row gap-3 pt-6 border-t border-gray-200">
				<button type="submit" class="btn-primary">
					Save Changes
				</button>
				<a href="/profile" class="btn-secondary text-center">
					Cancel
				</a>
			</div>
			
			<!-- General Error -->
			if errors["general"] != "" {
				@ErrorMessage(errors["general"])
			}
		</form>
	</div>
}

// UserList displays a list of users for management
templ UserList(users []User, currentPage int, totalPages int) {
	<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
		<!-- Header -->
		<div class="flex justify-between items-center mb-8">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">User Management</h1>
				<p class="text-gray-600 mt-2">Manage user accounts and permissions.</p>
			</div>
			<a href="/admin/users/create" class="btn-primary">
				Add New User
			</a>
		</div>
		
		<!-- Users Table -->
		<div class="card overflow-hidden">
			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
								User
							</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
								Status
							</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
								Created
							</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
								Actions
							</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						for _, user := range users {
							@UserTableRow(user)
						}
					</tbody>
				</table>
			</div>
			
			<!-- Pagination -->
			if totalPages > 1 {
				@Pagination(currentPage, totalPages, "/admin/users")
			}
		</div>
	</div>
}

// UserTableRow displays a single user row in the users table
templ UserTableRow(user User) {
	<tr class="hover:bg-gray-50">
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="flex items-center">
				<div class="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center">
					<span class="text-sm font-bold text-white">
						{ string(user.FirstName[0]) }{ string(user.LastName[0]) }
					</span>
				</div>
				<div class="ml-4">
					<div class="text-sm font-medium text-gray-900">
						{ user.FirstName } { user.LastName }
					</div>
					<div class="text-sm text-gray-500">
						{ user.Email }
					</div>
				</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			@UserStatusBadge(user.Status)
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
			{ user.CreatedAt.Format("Jan 2, 2006") }
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
			<div class="flex space-x-2">
				<a href={ templ.URL("/admin/users/" + user.ID) } class="text-blue-600 hover:text-blue-900">
					View
				</a>
				<a href={ templ.URL("/admin/users/" + user.ID + "/edit") } class="text-indigo-600 hover:text-indigo-900">
					Edit
				</a>
				<button 
					class="text-red-600 hover:text-red-900 delete-user-btn"
					data-user-id={ user.ID }
					data-user-name={ user.FirstName + " " + user.LastName }
				>
					Delete
				</button>
			</div>
		</td>
	</tr>
}

// UserStatusBadge displays a status badge for a user
templ UserStatusBadge(status string) {
	<span class={ 
		"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
		templ.KV("bg-green-100 text-green-800", status == "active"),
		templ.KV("bg-yellow-100 text-yellow-800", status == "inactive"),
		templ.KV("bg-red-100 text-red-800", status == "suspended")
	}>
		{ status }
	</span>
}

// Supporting types and helper components
type DashboardStats struct {
	ProfileViews      string
	LastLogin         time.Time
	RecentActivities  []Activity
}

type Activity struct {
	Type        string
	Description string
	Timestamp   time.Time
}

// StatsCard displays a statistic with an icon
templ StatsCard(title string, value string, icon string, color string) {
	<div class="card">
		<div class="flex items-center">
			<div class={ 
				"flex-shrink-0 w-8 h-8 rounded-md flex items-center justify-center",
				templ.KV("bg-blue-100", color == "blue"),
				templ.KV("bg-green-100", color == "green"),
				templ.KV("bg-purple-100", color == "purple"),
				templ.KV("bg-yellow-100", color == "yellow")
			}>
				@Icon(icon, color)
			</div>
			<div class="ml-4">
				<p class="text-sm font-medium text-gray-600">{ title }</p>
				<p class="text-2xl font-semibold text-gray-900">{ value }</p>
			</div>
		</div>
	</div>
}

// ActivityItem displays a single activity item
templ ActivityItem(activity Activity) {
	<div class="flex items-center space-x-3">
		<div class="w-2 h-2 bg-blue-600 rounded-full"></div>
		<div class="flex-1">
			<p class="text-sm text-gray-900">{ activity.Description }</p>
			<p class="text-xs text-gray-500">{ activity.Timestamp.Format("Jan 2, 3:04 PM") }</p>
		</div>
	</div>
}

// QuickLinkCard displays a quick action link
templ QuickLinkCard(title string, href string, icon string) {
	<a href={ templ.URL(href) } class="block p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:shadow-sm transition-all">
		<div class="flex items-center space-x-3">
			<div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
				@Icon(icon, "gray")
			</div>
			<span class="text-sm font-medium text-gray-900">{ title }</span>
		</div>
	</a>
}

// Pagination component for user lists
templ Pagination(currentPage int, totalPages int, baseURL string) {
	<div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
		<div class="flex-1 flex justify-between sm:hidden">
			if currentPage > 1 {
				<a href={ templ.URL(baseURL + "?page=" + strconv.Itoa(currentPage-1)) } class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
					Previous
				</a>
			}
			if currentPage < totalPages {
				<a href={ templ.URL(baseURL + "?page=" + strconv.Itoa(currentPage+1)) } class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
					Next
				</a>
			}
		</div>
		<div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
			<div>
				<p class="text-sm text-gray-700">
					Showing page <span class="font-medium">{ strconv.Itoa(currentPage) }</span> of <span class="font-medium">{ strconv.Itoa(totalPages) }</span>
				</p>
			</div>
			<div>
				<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
					if currentPage > 1 {
						<a href={ templ.URL(baseURL + "?page=" + strconv.Itoa(currentPage-1)) } class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
							Previous
						</a>
					}
					
					for i := 1; i <= totalPages; i++ {
						if i == currentPage {
							<span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-blue-50 text-sm font-medium text-blue-600">
								{ strconv.Itoa(i) }
							</span>
						} else {
							<a href={ templ.URL(baseURL + "?page=" + strconv.Itoa(i)) } class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
								{ strconv.Itoa(i) }
							</a>
						}
					}
					
					if currentPage < totalPages {
						<a href={ templ.URL(baseURL + "?page=" + strconv.Itoa(currentPage+1)) } class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
							Next
						</a>
					}
				</nav>
			</div>
		</div>
	</div>
}

// Helper functions
func getStatusColor(status string) string {
	switch status {
	case "active":
		return "green"
	case "inactive":
		return "yellow"
	case "suspended":
		return "red"
	default:
		return "gray"
	}
}