package components

import "fmt"

// Icon renders SVG icons with different colors
templ Icon(name string, color string) {
	<svg class={ 
		"w-5 h-5",
		templ.KV("text-blue-600", color == "blue"),
		templ.KV("text-green-600", color == "green"),
		templ.KV("text-purple-600", color == "purple"),
		templ.KV("text-yellow-600", color == "yellow"),
		templ.KV("text-gray-600", color == "gray"),
		templ.KV("text-red-600", color == "red"),
		templ.KV("text-white", color == "white")
	} fill="currentColor" viewBox="0 0 20 20">
		if name == "user" {
			<path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
		} else if name == "calendar" {
			<path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
		} else if name == "eye" {
			<path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path>
			<path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path>
		} else if name == "clock" {
			<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
		} else if name == "cog" {
			<path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path>
		} else if name == "shield" {
			<path fill-rule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
		} else if name == "bell" {
			<path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z"></path>
		} else if name == "question" {
			<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
		} else if name == "plus" {
			<path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path>
		} else if name == "edit" {
			<path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
		} else if name == "trash" {
			<path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
		} else if name == "search" {
			<path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
		} else if name == "check" {
			<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
		} else if name == "warning" {
			<path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
		}
	</svg>
}

// Card component for consistent card styling
templ Card(title string, content templ.Component) {
	<div class="card">
		if title != "" {
			<h3 class="text-lg font-semibold text-gray-900 mb-4">{ title }</h3>
		}
		@content
	</div>
}

// Button components with different variants
templ Button(text string, variant string, href string) {
	if href != "" {
		<a 
			href={ templ.URL(href) }
			class={ 
				"inline-flex items-center justify-center px-4 py-2 border text-sm font-medium rounded-md transition-colors duration-200",
				templ.KV("btn-primary", variant == "primary"),
				templ.KV("btn-secondary", variant == "secondary"),
				templ.KV("border-transparent bg-red-600 text-white hover:bg-red-700", variant == "danger"),
				templ.KV("border-gray-300 bg-white text-gray-700 hover:bg-gray-50", variant == "outline")
			}
		>
			{ text }
		</a>
	} else {
		<button 
			type="button"
			class={ 
				"inline-flex items-center justify-center px-4 py-2 border text-sm font-medium rounded-md transition-colors duration-200",
				templ.KV("btn-primary", variant == "primary"),
				templ.KV("btn-secondary", variant == "secondary"),
				templ.KV("border-transparent bg-red-600 text-white hover:bg-red-700", variant == "danger"),
				templ.KV("border-gray-300 bg-white text-gray-700 hover:bg-gray-50", variant == "outline")
			}
		>
			{ text }
		</button>
	}
}

// Modal component for dialogs
templ Modal(id string, title string, content templ.Component, showFooter bool) {
	<div id={ id } class="fixed inset-0 z-50 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
		<div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
			<!-- Background overlay -->
			<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
			
			<!-- Modal panel -->
			<div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
				<div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
					<div class="sm:flex sm:items-start">
						<div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
							<h3 class="text-lg leading-6 font-medium text-gray-900 mb-4" id="modal-title">
								{ title }
							</h3>
							<div class="mt-2">
								@content
							</div>
						</div>
					</div>
				</div>
				if showFooter {
					<div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
						<button 
							type="button" 
							class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
							id={ "confirm-" + id }
						>
							Confirm
						</button>
						<button 
							type="button" 
							class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
							id={ "cancel-" + id }
						>
							Cancel
						</button>
					</div>
				}
			</div>
		</div>
	</div>
}

// SearchBox component for filtering
templ SearchBox(placeholder string, value string, name string) {
	<div class="relative">
		<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
			@Icon("search", "gray")
		</div>
		<input 
			type="text" 
			class="form-input pl-10" 
			placeholder={ placeholder }
			value={ value }
			name={ name }
		/>
	</div>
}

// EmptyState component for when there's no data
templ EmptyState(title string, description string, actionText string, actionHref string) {
	<div class="text-center py-12">
		<div class="w-12 h-12 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4">
			@Icon("user", "gray")
		</div>
		<h3 class="text-lg font-medium text-gray-900 mb-2">{ title }</h3>
		<p class="text-gray-500 mb-6">{ description }</p>
		if actionText != "" && actionHref != "" {
			<a href={ templ.URL(actionHref) } class="btn-primary">
				{ actionText }
			</a>
		}
	</div>
}

// LoadingSpinner component
templ LoadingSpinner(size string) {
	<div class={ 
		"animate-spin rounded-full border-b-2 border-blue-600",
		templ.KV("h-4 w-4", size == "sm"),
		templ.KV("h-8 w-8", size == "md"),
		templ.KV("h-12 w-12", size == "lg")
	}></div>
}

// Badge component for status indicators
templ Badge(text string, variant string) {
	<span class={ 
		"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
		templ.KV("bg-green-100 text-green-800", variant == "success"),
		templ.KV("bg-red-100 text-red-800", variant == "error"),
		templ.KV("bg-yellow-100 text-yellow-800", variant == "warning"),
		templ.KV("bg-blue-100 text-blue-800", variant == "info"),
		templ.KV("bg-gray-100 text-gray-800", variant == "default")
	}>
		{ text }
	</span>
}

// Breadcrumb component for navigation
templ Breadcrumb(items []BreadcrumbItem) {
	<nav class="flex mb-6" aria-label="Breadcrumb">
		<ol class="inline-flex items-center space-x-1 md:space-x-3">
			for i, item := range items {
				<li class="inline-flex items-center">
					if i > 0 {
						<svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
						</svg>
					}
					if item.Href != "" {
						<a href={ templ.URL(item.Href) } class="text-gray-500 hover:text-gray-700 text-sm font-medium">
							{ item.Text }
						</a>
					} else {
						<span class="text-gray-900 text-sm font-medium">{ item.Text }</span>
					}
				</li>
			}
		</ol>
	</nav>
}

type BreadcrumbItem struct {
	Text string
	Href string
}

// Tabs component for navigation
templ Tabs(tabs []Tab, activeTab string) {
	<div class="border-b border-gray-200 mb-6">
		<nav class="-mb-px flex space-x-8" aria-label="Tabs">
			for _, tab := range tabs {
				<a 
					href={ templ.URL(tab.Href) }
					class={ 
						"whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm",
						templ.KV("border-blue-500 text-blue-600", tab.ID == activeTab),
						templ.KV("border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300", tab.ID != activeTab)
					}
				>
					{ tab.Text }
				</a>
			}
		</nav>
	</div>
}

type Tab struct {
	ID   string
	Text string
	Href string
}

// ConfirmationDialog for delete actions
templ ConfirmationDialog() {
	@Modal("confirmation-modal", "Confirm Action", ConfirmationContent(), true)
}

templ ConfirmationContent() {
	<div class="text-center">
		<div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
			@Icon("trash", "red")
		</div>
		<p class="text-sm text-gray-500" id="confirmation-message">
			Are you sure you want to perform this action? This cannot be undone.
		</p>
	</div>
}

// ResponsiveGrid component for consistent grid layouts
templ ResponsiveGrid(columns string, gap string, content templ.Component) {
	<div class={ 
		"grid gap-" + gap,
		templ.KV("grid-cols-1 md:grid-cols-2", columns == "2"),
		templ.KV("grid-cols-1 md:grid-cols-2 lg:grid-cols-3", columns == "3"),
		templ.KV("grid-cols-1 md:grid-cols-2 lg:grid-cols-4", columns == "4"),
		templ.KV("grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6", columns == "6")
	}>
		@content
	</div>
}

// ActionButton component for consistent action styling
templ ActionButton(text string, action string, variant string, icon string) {
	<button 
		type="button"
		class={ 
			"inline-flex items-center px-3 py-2 border text-sm leading-4 font-medium rounded-md transition-colors duration-200",
			templ.KV("border-transparent bg-blue-600 text-white hover:bg-blue-700", variant == "primary"),
			templ.KV("border-gray-300 bg-white text-gray-700 hover:bg-gray-50", variant == "secondary"),
			templ.KV("border-transparent bg-red-600 text-white hover:bg-red-700", variant == "danger"),
			templ.KV("border-transparent bg-green-600 text-white hover:bg-green-700", variant == "success")
		}
		data-action={ action }
	>
		if icon != "" {
			<span class="mr-2">
				@Icon(icon, "white")
			</span>
		}
		{ text }
	</button>
}

// StatusIndicator component for showing online/offline status
templ StatusIndicator(status string, text string) {
	<div class="flex items-center">
		<div class={ 
			"w-2 h-2 rounded-full mr-2",
			templ.KV("bg-green-400", status == "online"),
			templ.KV("bg-red-400", status == "offline"),
			templ.KV("bg-yellow-400", status == "away"),
			templ.KV("bg-gray-400", status == "unknown")
		}></div>
		<span class="text-sm text-gray-600">{ text }</span>
	</div>
}

// ProgressBar component for showing progress
templ ProgressBar(percentage int, color string, showText bool) {
	<div class="w-full bg-gray-200 rounded-full h-2">
		<div 
			class={ 
				"h-2 rounded-full transition-all duration-300",
				templ.KV("bg-blue-600", color == "blue"),
				templ.KV("bg-green-600", color == "green"),
				templ.KV("bg-red-600", color == "red"),
				templ.KV("bg-yellow-600", color == "yellow")
			}
			style={ "width: " + fmt.Sprintf("%d", percentage) + "%" }
		></div>
	</div>
	if showText {
		<div class="text-xs text-gray-500 mt-1">
			{ fmt.Sprintf("%d", percentage) }% complete
		</div>
	}
}

// Tooltip component for additional information
templ Tooltip(content string, tooltip string) {
	<div class="relative group">
		{ content }
		<div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap">
			{ tooltip }
			<div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
		</div>
	</div>
}

// AlertBanner component for important messages
templ AlertBanner(message string, variant string, dismissible bool) {
	<div class={ 
		"p-4 rounded-md mb-4",
		templ.KV("bg-blue-50 border border-blue-200", variant == "info"),
		templ.KV("bg-green-50 border border-green-200", variant == "success"),
		templ.KV("bg-yellow-50 border border-yellow-200", variant == "warning"),
		templ.KV("bg-red-50 border border-red-200", variant == "error")
	}>
		<div class="flex">
			<div class="flex-shrink-0">
				if variant == "info" {
					@Icon("question", "blue")
				} else if variant == "success" {
					@Icon("check", "green")
				} else if variant == "warning" {
					@Icon("warning", "yellow")
				} else if variant == "error" {
					@Icon("warning", "red")
				}
			</div>
			<div class="ml-3 flex-1">
				<p class={ 
					"text-sm",
					templ.KV("text-blue-800", variant == "info"),
					templ.KV("text-green-800", variant == "success"),
					templ.KV("text-yellow-800", variant == "warning"),
					templ.KV("text-red-800", variant == "error")
				}>
					{ message }
				</p>
			</div>
			if dismissible {
				<div class="ml-auto pl-3">
					<button 
						type="button" 
						class={ 
							"inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2",
							templ.KV("text-blue-500 hover:bg-blue-100 focus:ring-blue-600", variant == "info"),
							templ.KV("text-green-500 hover:bg-green-100 focus:ring-green-600", variant == "success"),
							templ.KV("text-yellow-500 hover:bg-yellow-100 focus:ring-yellow-600", variant == "warning"),
							templ.KV("text-red-500 hover:bg-red-100 focus:ring-red-600", variant == "error")
						}
						onclick="this.parentElement.parentElement.parentElement.remove()"
					>
						<span class="sr-only">Dismiss</span>
						<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
							<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
						</svg>
					</button>
				</div>
			}
		</div>
	</div>
}

